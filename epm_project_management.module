<?php



include_once('epm_project_management.features.inc');

function epm_project_management_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // @todolow: on validate, make sure the shortname is on d.o.
  // On insert create a record in epm_project_management_data and scrape data for it.
  // On load, add in some data.
  // On view, make that data pretty.
  
}

/**
 * Implements hook_cron();
 */
function epm_project_management_cron() {
  // Scrape data for some nodes that have not been updated recently.
  epm_project_management_update_projects(20);
}

/**
 * A function to update projects.
 * @param $count
 *   The number of nodes to update. Projects are updated from the most out of date to the newest.
 */
function epm_project_management_update_projects($count = 1) {
  
  // Get rid of records for nodes that don't exist.
  db_query("DELETE epm FROM {epm_project_management_data} epm LEFT JOIN {node} n ON epm.nid = n.nid WHERE n.nid IS NULL");
  
  // Now update nodes.
  $nodes = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {epm_project_management_data} epm ON n.nid = epm.nid WHERE n.type = 'epm_project' ORDER BY epm.last_update, n.nid ASC", 0, $count);
  while ($nid = db_fetch_array($nodes)) {
    epm_get_data($nid);
  }
}

function epm_project_management_init() {
  epm_project_management_update_projects(1);
}

function epm_get_data($nid) {
  $node = node_load($nid);
  if (empty($node)) {
    // Delete it.
  }
  else {
    $data['nid'] = $node->nid;

    // We need this.
    require_once('QueryPath/QueryPath.php');
    $data['major_version_usage'] = _epm_get_usage_data($node->field_epm_project_shortname[0]['value']);
    // TODO: more of these here.
    
    $data['last_update'] = time();
    // Delete the record, then insert it.
    db_query("DELETE FROM {epm_project_management_data} WHERE nid = %d", $data['nid']);
    drupal_write_record('epm_project_management_data', $data);
  }
}

function _epm_get_page($url) {
  $doc = new DomDocument();
  @$doc->loadHTMLFile($url);
  return $doc;
}

function _epm_get_usage_data($short_name) {
  $version = variable_get('epm_project_management_major_version', '6');
  // Scrape to get usage. Return it.
  
  $doc = _epm_get_page('http://drupal.org/project/usage/'. $short_name);
  $qp = qp($doc, '#project-usage-project-api');
  
  if ($qp) {
    $rows = array();

    // First find the column we care about.
    // Basically, we find the one we want, and then count how many 
    // th's are before it. This gives us a suitable offset.
    $column_number = $qp->branch('th:text(' . $version . '.x)')->prevAll('th')->size() + 2;

    $data = array();
    
    // Next find the row with usage.
    // Now we loop through the actual table.
    foreach ($qp->find('>tbody>tr') as $row) {
      // Get the td's and then get the value of the first column.
      $date = $row->children('td')->eq(0)->text();
      
      // Shift back to all of the td's, and then get the $col_num'th column.
      $download_total = str_replace(',', '', $row->end()->eq($column_number)->text());
      
      // We only care about the first record.
      break;
    }
  }
      
  return $download_total; 
}

